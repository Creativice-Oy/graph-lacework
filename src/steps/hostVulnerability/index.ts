import {
  IntegrationStep,
  IntegrationStepExecutionContext,
  createDirectRelationship,
  RelationshipClass,
} from '@jupiterone/integration-sdk-core';
import { IntegrationConfig } from '../../config';
import { Steps, Entities, Relationships } from '../constants';

import { createHostVulnerabilityEntity } from './converter';
import { getMachineKey } from '../machine/converter';
import { createAPIClient } from '../../client';

// iterate over all cloud accounts then over all assessment types
// for that type of cloud account
export async function fetchHostVulnerabilities({
  instance,
  jobState,
  logger,
}: IntegrationStepExecutionContext<IntegrationConfig>) {
  const apiClient = createAPIClient(instance.config);

  await apiClient.iterateHostVulnerabilities(async (hostVulnerability) => {
    if (!hostVulnerability.vulnId) {
      return;
    }
    const hostVulnerabilityEntity = await jobState.addEntity(
      createHostVulnerabilityEntity(hostVulnerability),
    );

    //console.log(hostVulnerability)
    const machineEntity = await jobState.findEntity(
      getMachineKey(hostVulnerability.machineTags.Hostname),
    );

    if (machineEntity) {
      await jobState.addRelationship(
        createDirectRelationship({
          _class: RelationshipClass.HAS,
          from: machineEntity,
          to: hostVulnerabilityEntity,
        }),
      );
    }
  });
}

export const hostVulnerabilitySteps: IntegrationStep<IntegrationConfig>[] = [
  {
    id: Steps.HOST_VULNERABILITIES.id,
    name: Steps.HOST_VULNERABILITIES.name,
    entities: [Entities.HOST_VULNERABILITY],
    relationships: [Relationships.MACHINE_HAS_FINDING],
    dependsOn: [Steps.MACHINES.id],
    executionHandler: fetchHostVulnerabilities,
  },
];
